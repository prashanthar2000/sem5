> Web3 = require('web3')
{ [Function: Web3]
  version: '1.2.11',
  utils:
   { _fireError: [Function: _fireError],
     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
     _flattenTypes: [Function: _flattenTypes],
     randomHex: [Function: randomHex],
     _:
      { [Function: _]
        _: [Circular],
        VERSION: '1.9.1',
        iteratee: [Function: builtinIteratee],
        forEach: [Function],
        each: [Function],
        collect: [Function],
        map: [Function],
        inject: [Function],
        foldl: [Function],
        reduce: [Function],
        foldr: [Function],
        reduceRight: [Function],
        detect: [Function],
        find: [Function],
        select: [Function],
        filter: [Function],
        reject: [Function],
        all: [Function],
        every: [Function],
        any: [Function],
        some: [Function],
        include: [Function],
        includes: [Function],
        contains: [Function],
        invoke: [Function],
        pluck: [Function],
        where: [Function],
        findWhere: [Function],
        max: [Function],
        min: [Function],
        shuffle: [Function],
        sample: [Function],
        sortBy: [Function],
        groupBy: [Function],
        indexBy: [Function],
        countBy: [Function],
        toArray: [Function],
        size: [Function],
        partition: [Function],
        take: [Function],
        head: [Function],
        first: [Function],
        initial: [Function],
        last: [Function],
        drop: [Function],
        tail: [Function],
        rest: [Function],
        compact: [Function],
        flatten: [Function],
        without: [Function],
        unique: [Function],
        uniq: [Function],
        union: [Function],
        intersection: [Function],
        difference: [Function],
        unzip: [Function],
        zip: [Function],
        object: [Function],
        findIndex: [Function],
        findLastIndex: [Function],
        sortedIndex: [Function],
        indexOf: [Function],
        lastIndexOf: [Function],
        range: [Function],
        chunk: [Function],
        bind: [Function],
        partial: [Function],
        bindAll: [Function],
        memoize: [Function],
        delay: [Function],
        defer: [Function: bound],
        throttle: [Function],
        debounce: [Function],
        wrap: [Function],
        negate: [Function],
        compose: [Function],
        after: [Function],
        before: [Function],
        once: [Function: bound],
        restArguments: [Function: restArguments],
        keys: [Function],
        allKeys: [Function],
        values: [Function],
        mapObject: [Function],
        pairs: [Function],
        invert: [Function],
        methods: [Function],
        functions: [Function],
        extend: [Function],
        assign: [Function],
        extendOwn: [Function],
        findKey: [Function],
        pick: [Function],
        omit: [Function],
        defaults: [Function],
        create: [Function],
        clone: [Function],
        tap: [Function],
        isMatch: [Function],
        isEqual: [Function],
        isEmpty: [Function],
        isElement: [Function],
        isArray: [Function: isArray],
        isObject: [Function],
        isArguments: [Function],
        isFunction: [Function],
        isString: [Function],
        isNumber: [Function],
        isDate: [Function],
        isRegExp: [Function],
        isError: [Function],
        isSymbol: [Function],
        isMap: [Function],
        isWeakMap: [Function],
        isSet: [Function],
        isWeakSet: [Function],
        isFinite: [Function],
        isNaN: [Function],
        isBoolean: [Function],
        isNull: [Function],
        isUndefined: [Function],
        has: [Function],
        noConflict: [Function],
        identity: [Function],
        constant: [Function],
        noop: [Function],
        property: [Function],
        propertyOf: [Function],
        matches: [Function],
        matcher: [Function],
        times: [Function],
        random: [Function],
        now: [Function: now],
        escape: [Function],
        unescape: [Function],
        result: [Function],
        uniqueId: [Function],
        templateSettings: [Object],
        template: [Function],
        chain: [Function],
        mixin: [Function] },
     BN:
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     isBN: [Function: isBN],
     isBigNumber: [Function: isBigNumber],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     sha3: { [Function: sha3] _Hash: [Object] },
     sha3Raw: [Function: sha3Raw],
     keccak256: { [Function: sha3] _Hash: [Object] },
     soliditySha3: [Function: soliditySha3],
     soliditySha3Raw: [Function: soliditySha3Raw],
     isAddress: [Function: isAddress],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toChecksumAddress: [Function: toChecksumAddress],
     toHex: [Function: toHex],
     toBN: [Function: toBN],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     hexToNumberString: [Function: hexToNumberString],
     hexToNumber: [Function: hexToNumber],
     toDecimal: [Function: hexToNumber],
     numberToHex: [Function: numberToHex],
     fromDecimal: [Function: numberToHex],
     hexToUtf8: [Function: hexToUtf8],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     utf8ToHex: [Function: utf8ToHex],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     hexToAscii: [Function: hexToAscii],
     toAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     fromAscii: [Function: asciiToHex],
     unitMap:
      { noether: '0',
        wei: '1',
        kwei: '1000',
        Kwei: '1000',
        babbage: '1000',
        femtoether: '1000',
        mwei: '1000000',
        Mwei: '1000000',
        lovelace: '1000000',
        picoether: '1000000',
        gwei: '1000000000',
        Gwei: '1000000000',
        shannon: '1000000000',
        nanoether: '1000000000',
        nano: '1000000000',
        szabo: '1000000000000',
        microether: '1000000000000',
        micro: '1000000000000',
        finney: '1000000000000000',
        milliether: '1000000000000000',
        milli: '1000000000000000',
        ether: '1000000000000000000',
        kether: '1000000000000000000000',
        grand: '1000000000000000000000',
        mether: '1000000000000000000000000',
        gether: '1000000000000000000000000000',
        tether: '1000000000000000000000000000000' },
     toWei: [Function: toWei],
     fromWei: [Function: fromWei],
     padLeft: [Function: leftPad],
     leftPad: [Function: leftPad],
     padRight: [Function: rightPad],
     rightPad: [Function: rightPad],
     toTwosComplement: [Function: toTwosComplement],
     isBloom: [Function: isBloom],
     isUserEthereumAddressInBloom: [Function: isUserEthereumAddressInBloom],
     isContractAddressInBloom: [Function: isContractAddressInBloom],
     isTopic: [Function: isTopic],
     isTopicInBloom: [Function: isTopicInBloom],
     isInBloom: [Function: isInBloom] },
  modules:
   { Eth: { [Function: Eth] givenProvider: null, providers: [Object] },
     Net: { [Function: Net] givenProvider: null, providers: [Object] },
     Personal:
      { [Function: Personal] givenProvider: null, providers: [Object] },
     Shh: { [Function: Shh] givenProvider: null, providers: [Object] },
     Bzz: { [Function: Bzz] givenProvider: null } },
  givenProvider: null,
  providers:
   { WebsocketProvider: [Function: WebsocketProvider],
     HttpProvider: [Function: HttpProvider],
     IpcProvider: [Function: IpcProvider] } }
> web3 = new Web3("http://localhost:8545")
Web3 {
  currentProvider: [Getter/Setter],
  _requestManager:
   RequestManager {
     provider:
      HttpProvider {
        withCredentials: false,
        timeout: 0,
        headers: undefined,
        agent: undefined,
        connected: false,
        host: 'http://localhost:8545',
        httpAgent: [Agent] },
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     subscriptions: Map {} },
  givenProvider: null,
  providers:
   { WebsocketProvider: [Function: WebsocketProvider],
     HttpProvider: [Function: HttpProvider],
     IpcProvider: [Function: IpcProvider] },
  _provider:
   HttpProvider {
     withCredentials: false,
     timeout: 0,
     headers: undefined,
     agent: undefined,
     connected: false,
     host: 'http://localhost:8545',
     httpAgent:
      Agent {
        domain: [Domain],
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256 } },
  setProvider: [Function],
  setRequestManager: [Function],
  BatchRequest: [Function: bound Batch],
  extend:
   { [Function: ex]
     formatters:
      { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        inputStorageKeysFormatter: [Function: inputStorageKeysFormatter],
        outputProofFormatter: [Function: outputProofFormatter],
        outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     utils:
      { _fireError: [Function: _fireError],
        _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
        _flattenTypes: [Function: _flattenTypes],
        randomHex: [Function: randomHex],
        _: [Function],
        BN: [Function],
        isBN: [Function: isBN],
        isBigNumber: [Function: isBigNumber],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        sha3: [Function],
        sha3Raw: [Function: sha3Raw],
        keccak256: [Function],
        soliditySha3: [Function: soliditySha3],
        soliditySha3Raw: [Function: soliditySha3Raw],
        isAddress: [Function: isAddress],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toChecksumAddress: [Function: toChecksumAddress],
        toHex: [Function: toHex],
        toBN: [Function: toBN],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        hexToNumberString: [Function: hexToNumberString],
        hexToNumber: [Function: hexToNumber],
        toDecimal: [Function: hexToNumber],
        numberToHex: [Function: numberToHex],
        fromDecimal: [Function: numberToHex],
        hexToUtf8: [Function: hexToUtf8],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        utf8ToHex: [Function: utf8ToHex],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        hexToAscii: [Function: hexToAscii],
        toAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        fromAscii: [Function: asciiToHex],
        unitMap: [Object],
        toWei: [Function: toWei],
        fromWei: [Function: fromWei],
        padLeft: [Function: leftPad],
        leftPad: [Function: leftPad],
        padRight: [Function: rightPad],
        rightPad: [Function: rightPad],
        toTwosComplement: [Function: toTwosComplement],
        isBloom: [Function: isBloom],
        isUserEthereumAddressInBloom: [Function: isUserEthereumAddressInBloom],
        isContractAddressInBloom: [Function: isContractAddressInBloom],
        isTopic: [Function: isTopic],
        isTopicInBloom: [Function: isTopicInBloom],
        isInBloom: [Function: isInBloom] },
     Method: [Function: Method] },
  version: '1.2.11',
  utils:
   { _fireError: [Function: _fireError],
     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
     _flattenTypes: [Function: _flattenTypes],
     randomHex: [Function: randomHex],
     _:
      { [Function: _]
        _: [Circular],
        VERSION: '1.9.1',
        iteratee: [Function: builtinIteratee],
        forEach: [Function],
        each: [Function],
        collect: [Function],
        map: [Function],
        inject: [Function],
        foldl: [Function],
        reduce: [Function],
        foldr: [Function],
        reduceRight: [Function],
        detect: [Function],
        find: [Function],
        select: [Function],
        filter: [Function],
        reject: [Function],
        all: [Function],
        every: [Function],
        any: [Function],
        some: [Function],
        include: [Function],
        includes: [Function],
        contains: [Function],
        invoke: [Function],
        pluck: [Function],
        where: [Function],
        findWhere: [Function],
        max: [Function],
        min: [Function],
        shuffle: [Function],
        sample: [Function],
        sortBy: [Function],
        groupBy: [Function],
        indexBy: [Function],
        countBy: [Function],
        toArray: [Function],
        size: [Function],
        partition: [Function],
        take: [Function],
        head: [Function],
        first: [Function],
        initial: [Function],
        last: [Function],
        drop: [Function],
        tail: [Function],
        rest: [Function],
        compact: [Function],
        flatten: [Function],
        without: [Function],
        unique: [Function],
        uniq: [Function],
        union: [Function],
        intersection: [Function],
        difference: [Function],
        unzip: [Function],
        zip: [Function],
        object: [Function],
        findIndex: [Function],
        findLastIndex: [Function],
        sortedIndex: [Function],
        indexOf: [Function],
        lastIndexOf: [Function],
        range: [Function],
        chunk: [Function],
        bind: [Function],
        partial: [Function],
        bindAll: [Function],
        memoize: [Function],
        delay: [Function],
        defer: [Function: bound],
        throttle: [Function],
        debounce: [Function],
        wrap: [Function],
        negate: [Function],
        compose: [Function],
        after: [Function],
        before: [Function],
        once: [Function: bound],
        restArguments: [Function: restArguments],
        keys: [Function],
        allKeys: [Function],
        values: [Function],
        mapObject: [Function],
        pairs: [Function],
        invert: [Function],
        methods: [Function],
        functions: [Function],
        extend: [Function],
        assign: [Function],
        extendOwn: [Function],
        findKey: [Function],
        pick: [Function],
        omit: [Function],
        defaults: [Function],
        create: [Function],
        clone: [Function],
        tap: [Function],
        isMatch: [Function],
        isEqual: [Function],
        isEmpty: [Function],
        isElement: [Function],
        isArray: [Function: isArray],
        isObject: [Function],
        isArguments: [Function],
        isFunction: [Function],
        isString: [Function],
        isNumber: [Function],
        isDate: [Function],
        isRegExp: [Function],
        isError: [Function],
        isSymbol: [Function],
        isMap: [Function],
        isWeakMap: [Function],
        isSet: [Function],
        isWeakSet: [Function],
        isFinite: [Function],
        isNaN: [Function],
        isBoolean: [Function],
        isNull: [Function],
        isUndefined: [Function],
        has: [Function],
        noConflict: [Function],
        identity: [Function],
        constant: [Function],
        noop: [Function],
        property: [Function],
        propertyOf: [Function],
        matches: [Function],
        matcher: [Function],
        times: [Function],
        random: [Function],
        now: [Function: now],
        escape: [Function],
        unescape: [Function],
        result: [Function],
        uniqueId: [Function],
        templateSettings: [Object],
        template: [Function],
        chain: [Function],
        mixin: [Function] },
     BN:
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     isBN: [Function: isBN],
     isBigNumber: [Function: isBigNumber],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     sha3: { [Function: sha3] _Hash: [Object] },
     sha3Raw: [Function: sha3Raw],
     keccak256: { [Function: sha3] _Hash: [Object] },
     soliditySha3: [Function: soliditySha3],
     soliditySha3Raw: [Function: soliditySha3Raw],
     isAddress: [Function: isAddress],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toChecksumAddress: [Function: toChecksumAddress],
     toHex: [Function: toHex],
     toBN: [Function: toBN],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     hexToNumberString: [Function: hexToNumberString],
     hexToNumber: [Function: hexToNumber],
     toDecimal: [Function: hexToNumber],
     numberToHex: [Function: numberToHex],
     fromDecimal: [Function: numberToHex],
     hexToUtf8: [Function: hexToUtf8],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     utf8ToHex: [Function: utf8ToHex],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     hexToAscii: [Function: hexToAscii],
     toAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     fromAscii: [Function: asciiToHex],
     unitMap:
      { noether: '0',
        wei: '1',
        kwei: '1000',
        Kwei: '1000',
        babbage: '1000',
        femtoether: '1000',
        mwei: '1000000',
        Mwei: '1000000',
        lovelace: '1000000',
        picoether: '1000000',
        gwei: '1000000000',
        Gwei: '1000000000',
        shannon: '1000000000',
        nanoether: '1000000000',
        nano: '1000000000',
        szabo: '1000000000000',
        microether: '1000000000000',
        micro: '1000000000000',
        finney: '1000000000000000',
        milliether: '1000000000000000',
        milli: '1000000000000000',
        ether: '1000000000000000000',
        kether: '1000000000000000000000',
        grand: '1000000000000000000000',
        mether: '1000000000000000000000000',
        gether: '1000000000000000000000000000',
        tether: '1000000000000000000000000000000' },
     toWei: [Function: toWei],
     fromWei: [Function: fromWei],
     padLeft: [Function: leftPad],
     leftPad: [Function: leftPad],
     padRight: [Function: rightPad],
     rightPad: [Function: rightPad],
     toTwosComplement: [Function: toTwosComplement],
     isBloom: [Function: isBloom],
     isUserEthereumAddressInBloom: [Function: isUserEthereumAddressInBloom],
     isContractAddressInBloom: [Function: isContractAddressInBloom],
     isTopic: [Function: isTopic],
     isTopicInBloom: [Function: isTopicInBloom],
     isInBloom: [Function: isInBloom] },
  eth:
   Eth {
     currentProvider: [Getter/Setter],
     _requestManager:
      RequestManager {
        provider: [HttpProvider],
        providers: [Object],
        subscriptions: Map {} },
     givenProvider: null,
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _provider:
      HttpProvider {
        withCredentials: false,
        timeout: 0,
        headers: undefined,
        agent: undefined,
        connected: false,
        host: 'http://localhost:8545',
        httpAgent: [Agent] },
     setProvider: [Function],
     setRequestManager: [Function],
     BatchRequest: [Function: bound Batch],
     extend:
      { [Function: ex]
        formatters: [Object],
        utils: [Object],
        Method: [Function: Method] },
     handleRevert: [Getter/Setter],
     defaultCommon: [Getter/Setter],
     defaultHardfork: [Getter/Setter],
     defaultChain: [Getter/Setter],
     transactionPollingTimeout: [Getter/Setter],
     transactionConfirmationBlocks: [Getter/Setter],
     transactionBlockTimeout: [Getter/Setter],
     defaultAccount: [Getter/Setter],
     defaultBlock: [Getter/Setter],
     maxListenersWarningThreshold: [Getter/Setter],
     clearSubscriptions: [Function: bound ],
     net:
      Net {
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [HttpProvider],
        setProvider: [Function],
        setRequestManager: [Function],
        BatchRequest: [Function: bound Batch],
        extend: [Function],
        getId: [Function],
        isListening: [Function],
        getPeerCount: [Function],
        getNetworkType: [Function: bound getNetworkType] },
     accounts:
      Accounts {
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [HttpProvider],
        setProvider: [Function],
        setRequestManager: [Function],
        _ethereumCall: [Object],
        wallet: [Wallet] },
     personal:
      Personal {
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [HttpProvider],
        setProvider: [Function],
        setRequestManager: [Function],
        BatchRequest: [Function: bound Batch],
        extend: [Function],
        net: [Net],
        defaultAccount: [Getter/Setter],
        defaultBlock: [Getter/Setter],
        getAccounts: [Function],
        newAccount: [Function],
        unlockAccount: [Function],
        lockAccount: [Function],
        importRawKey: [Function],
        sendTransaction: [Function],
        signTransaction: [Function],
        sign: [Function],
        ecRecover: [Function] },
     Contract:
      { [Function: Contract]
        setProvider: [Function],
        defaultAccount: null,
        defaultBlock: 'latest',
        transactionBlockTimeout: 50,
        transactionConfirmationBlocks: 24,
        transactionPollingTimeout: 750,
        handleRevert: false,
        _requestManager: [RequestManager],
        _ethAccounts: [Accounts],
        currentProvider: [HttpProvider] },
     Iban:
      { [Function: Iban]
        toAddress: [Function],
        toIban: [Function],
        fromAddress: [Function],
        fromBban: [Function],
        createIndirect: [Function],
        isValid: [Function] },
     abi: ABICoder {},
     ens:
      ENS {
        eth: [Circular],
        _detectedAddress: null,
        _lastSyncCheck: null,
        registry: [Getter],
        resolverMethodHandler: [Getter],
        registryAddress: [Getter/Setter] },
     getNodeInfo:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'web3_clientVersion' },
     getProtocolVersion:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_protocolVersion' },
     getCoinbase:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_coinbase' },
     isMining:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_mining' },
     getHashrate:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_hashrate' },
     isSyncing:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_syncing' },
     getGasPrice:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_gasPrice' },
     getAccounts:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_accounts' },
     getBlockNumber:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_blockNumber' },
     getBalance:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getBalance' },
     getStorageAt:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getStorageAt' },
     getCode:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getCode' },
     getBlock:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: blockCall] },
     getUncle:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: uncleCall] },
     getBlockTransactionCount:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: getBlockTransactionCountCall] },
     getBlockUncleCount:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: uncleCountCall] },
     getTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getTransactionByHash' },
     getTransactionFromBlock:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: transactionFromBlockCall] },
     getTransactionReceipt:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getTransactionReceipt' },
     getTransactionCount:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getTransactionCount' },
     sendSignedTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_sendRawTransaction' },
     signTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_signTransaction' },
     sendTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_sendTransaction' },
     sign:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_sign' },
     call:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_call' },
     estimateGas:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_estimateGas' },
     submitWork:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_submitWork' },
     getWork:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getWork' },
     getPastLogs:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getLogs' },
     getChainId:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_chainId' },
     requestAccounts:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_requestAccounts' },
     getProof:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_getProof' },
     getPendingTransactions:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'eth_pendingTransactions' },
     subscribe: [Function] },
  shh:
   Shh {
     currentProvider: [Getter/Setter],
     _requestManager:
      RequestManager {
        provider: [HttpProvider],
        providers: [Object],
        subscriptions: Map {} },
     givenProvider: null,
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _provider:
      HttpProvider {
        withCredentials: false,
        timeout: 0,
        headers: undefined,
        agent: undefined,
        connected: false,
        host: 'http://localhost:8545',
        httpAgent: [Agent] },
     setProvider: [Function],
     setRequestManager: [Function],
     BatchRequest: [Function: bound Batch],
     extend:
      { [Function: ex]
        formatters: [Object],
        utils: [Object],
        Method: [Function: Method] },
     net:
      Net {
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [HttpProvider],
        setProvider: [Function],
        setRequestManager: [Function],
        BatchRequest: [Function: bound Batch],
        extend: [Function],
        getId: [Function],
        isListening: [Function],
        getPeerCount: [Function] },
     subscribe: [Function],
     getVersion:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_version' },
     getInfo:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_info' },
     setMaxMessageSize:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_setMaxMessageSize' },
     setMinPoW:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_setMinPoW' },
     markTrustedPeer:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_markTrustedPeer' },
     newKeyPair:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_newKeyPair' },
     addPrivateKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_addPrivateKey' },
     deleteKeyPair:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_deleteKeyPair' },
     hasKeyPair:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_hasKeyPair' },
     getPublicKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_getPublicKey' },
     getPrivateKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_getPrivateKey' },
     newSymKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_newSymKey' },
     addSymKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_addSymKey' },
     generateSymKeyFromPassword:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_generateSymKeyFromPassword' },
     hasSymKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_hasSymKey' },
     getSymKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_getSymKey' },
     deleteSymKey:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_deleteSymKey' },
     newMessageFilter:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_newMessageFilter' },
     getFilterMessages:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_getFilterMessages' },
     deleteMessageFilter:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_deleteMessageFilter' },
     post:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_post' },
     unsubscribe:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'shh_unsubscribe' } },
  bzz:
   Bzz {
     givenProvider: null,
     currentProvider: null,
     isAvailable: [Function],
     upload: [Function],
     download: [Function] } }
> web3.eth.getAccounts(console.log)
Promise {
  <pending>,
  domain:
   Domain {
     domain: null,
     _events:
      [Object: null prototype] {
        removeListener: [Function: updateExceptionCapture],
        newListener: [Function: updateExceptionCapture],
        error: [Function: debugDomainError] },
     _eventsCount: 3,
     _maxListeners: undefined,
     members: [],
     [Symbol(kWeak)]: WeakReference {} } }
> null [ '0x64D72F3fA03B2076fb93e0FEB1B8ebF685F63780',
  '0xBb2b88e4651Da3212bea83cc75325A8094988Fc7',
  '0x9330d6Cc5d951b90f2102a2fEbfEBBd1f603CCBc',
  '0xe5C1985484b57B9C35A8F6745CE6e51fA1314c19',
  '0xDFFDf7558330DbB57F993790128EFb1661AD49d5',
  '0x3c4328419F226a81807DBBeB5b30491f04B23f69',
  '0x26BE9Ea5aFAD06694F5AA96A717001EBbDF53814',
  '0x64fe1606D7029E7f014614eb50f316EfdEFcD26d',
  '0xe07F020b65DE653A737fa2c8c624de3034508ECb',
  '0xD35Cc44c054ADbfB2d6E5D1D0702F2c4a1fe3709' ]

> bytecode = fs.readFileSync('Voting_sol_Voting.bin').toString()
'60806040523480156100115760006000fd5b506040516104b53803806104b5833981810160405260208110156100355760006000fd5b81019080805160405193929190846401000000008211156100565760006000fd5b8382019150602082018581111561006d5760006000fd5b825186602082028301116401000000008211171561008b5760006000fd5b8083526020830192505050908051906020019060200280838360005b838110156100c35780820151818401525b6020810190506100a7565b505050509050016040526020015050505b80600160005090805190602001906100ed9291906100f5565b505b5061016e565b82805482825590600052602060002090810192821561013a579160200282015b82811115610139578251826000509060001916905591602001919060010190610115565b5b509050610147919061014b565b5090565b610150565b8082111561016a5760008181506000905550600101610150565b5090565b6103388061017d6000396000f3fe60806040523480156100115760006000fd5b506004361061005c5760003560e01c80632f265cf714610062578063392e6678146100a95780637021939f146100f2578063b13c744b14610139578063cc9ab267146101805761005c565b60006000fd5b610093600480360360208110156100795760006000fd5b8101908080356000191690602001909291905050506101b3565b6040518082815260200191505060405180910390f35b6100da600480360360208110156100c05760006000fd5b8101908080356000191690602001909291905050506101fe565b60405180821515815260200191505060405180910390f35b610123600480360360208110156101095760006000fd5b81019080803560001916906020019092919050505061026f565b6040518082815260200191505060405180910390f35b610166600480360360208110156101505760006000fd5b810190808035906020019092919050505061028a565b604051808260001916815260200191505060405180910390f35b6101b1600480360360208110156101975760006000fd5b8101908080356000191690602001909291905050506102b2565b005b60006101c4826101fe63ffffffff16565b15156101d05760006000fd5b6000600050600083600019166000191681526020019081526020016000206000505490506101f9565b919050565b60006000600090505b60016000508054905081101561026057826000191660016000508281548110151561022e57fe5b906000526020600020900160005b505460001916141561025257600191505061026a565b5b8080600101915050610207565b506000905061026a565b919050565b60006000506020528060005260406000206000915090505481565b60016000508181548110151561029c57fe5b906000526020600020900160005b915090505481565b6102c1816101fe63ffffffff16565b15156102cd5760006000fd5b600160006000506000836000191660001916815260200190815260200160002060008282825054019250508190909055505b5056fea2646970667358221220295238a448e0ebc13b6142acc11838e8de17d18def8d97ac903daf246ce815ff64736f6c63430007000033'
> abi = JSON.parse(fs.readFileSync('Voting_sol_Voting.abi').toString())
[ { inputs: [ [Object] ],
    stateMutability: 'nonpayable',
    type: 'constructor' },
  { inputs: [ [Object] ],
    name: 'candidateList',
    outputs: [ [Object] ],
    stateMutability: 'view',
    type: 'function' },
  { inputs: [ [Object] ],
    name: 'totalVotesFor',
    outputs: [ [Object] ],
    stateMutability: 'view',
    type: 'function' },
  { inputs: [ [Object] ],
    name: 'validCandidate',
    outputs: [ [Object] ],
    stateMutability: 'view',
    type: 'function' },
  { inputs: [ [Object] ],
    name: 'voteForCandidate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function' },
  { inputs: [ [Object] ],
    name: 'votesReceived',
    outputs: [ [Object] ],
    stateMutability: 'view',
    type: 'function' } ]
> deployedContract = new web3.eth.Contract(abi)
Contract {
  setProvider: [Function],
  currentProvider: [Getter/Setter],
  _requestManager:
   RequestManager {
     provider:
      HttpProvider {
        withCredentials: false,
        timeout: 0,
        headers: undefined,
        agent: undefined,
        connected: true,
        host: 'http://localhost:8545',
        httpAgent: [Agent] },
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     subscriptions: Map {} },
  givenProvider: null,
  providers:
   { WebsocketProvider: [Function: WebsocketProvider],
     HttpProvider: [Function: HttpProvider],
     IpcProvider: [Function: IpcProvider] },
  _provider:
   HttpProvider {
     withCredentials: false,
     timeout: 0,
     headers: undefined,
     agent: undefined,
     connected: true,
     host: 'http://localhost:8545',
     httpAgent:
      Agent {
        domain: [Domain],
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256 } },
  setRequestManager: [Function],
  BatchRequest: [Function: bound Batch],
  extend:
   { [Function: ex]
     formatters:
      { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        inputStorageKeysFormatter: [Function: inputStorageKeysFormatter],
        outputProofFormatter: [Function: outputProofFormatter],
        outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     utils:
      { _fireError: [Function: _fireError],
        _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
        _flattenTypes: [Function: _flattenTypes],
        randomHex: [Function: randomHex],
        _: [Function],
        BN: [Function],
        isBN: [Function: isBN],
        isBigNumber: [Function: isBigNumber],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        sha3: [Function],
        sha3Raw: [Function: sha3Raw],
        keccak256: [Function],
        soliditySha3: [Function: soliditySha3],
        soliditySha3Raw: [Function: soliditySha3Raw],
        isAddress: [Function: isAddress],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toChecksumAddress: [Function: toChecksumAddress],
        toHex: [Function: toHex],
        toBN: [Function: toBN],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        hexToNumberString: [Function: hexToNumberString],
        hexToNumber: [Function: hexToNumber],
        toDecimal: [Function: hexToNumber],
        numberToHex: [Function: numberToHex],
        fromDecimal: [Function: numberToHex],
        hexToUtf8: [Function: hexToUtf8],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        utf8ToHex: [Function: utf8ToHex],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        hexToAscii: [Function: hexToAscii],
        toAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        fromAscii: [Function: asciiToHex],
        unitMap: [Object],
        toWei: [Function: toWei],
        fromWei: [Function: fromWei],
        padLeft: [Function: leftPad],
        leftPad: [Function: leftPad],
        padRight: [Function: rightPad],
        rightPad: [Function: rightPad],
        toTwosComplement: [Function: toTwosComplement],
        isBloom: [Function: isBloom],
        isUserEthereumAddressInBloom: [Function: isUserEthereumAddressInBloom],
        isContractAddressInBloom: [Function: isContractAddressInBloom],
        isTopic: [Function: isTopic],
        isTopicInBloom: [Function: isTopicInBloom],
        isInBloom: [Function: isInBloom] },
     Method: [Function: Method] },
  clearSubscriptions: [Function],
  options: { address: [Getter/Setter], jsonInterface: [Getter/Setter] },
  handleRevert: [Getter/Setter],
  defaultCommon: [Getter/Setter],
  defaultHardfork: [Getter/Setter],
  defaultChain: [Getter/Setter],
  transactionPollingTimeout: [Getter/Setter],
  transactionConfirmationBlocks: [Getter/Setter],
  transactionBlockTimeout: [Getter/Setter],
  defaultAccount: [Getter/Setter],
  defaultBlock: [Getter/Setter],
  methods:
   { candidateList: [Function: bound _createTxObject],
     '0xb13c744b': [Function: bound _createTxObject],
     'candidateList(uint256)': [Function: bound _createTxObject],
     totalVotesFor: [Function: bound _createTxObject],
     '0x2f265cf7': [Function: bound _createTxObject],
     'totalVotesFor(bytes32)': [Function: bound _createTxObject],
     validCandidate: [Function: bound _createTxObject],
     '0x392e6678': [Function: bound _createTxObject],
     'validCandidate(bytes32)': [Function: bound _createTxObject],
     voteForCandidate: [Function: bound _createTxObject],
     '0xcc9ab267': [Function: bound _createTxObject],
     'voteForCandidate(bytes32)': [Function: bound _createTxObject],
     votesReceived: [Function: bound _createTxObject],
     '0x7021939f': [Function: bound _createTxObject],
     'votesReceived(bytes32)': [Function: bound _createTxObject] },
  events: { allEvents: [Function: bound ] },
  _address: null,
  _jsonInterface:
   [ { inputs: [Array],
       stateMutability: 'nonpayable',
       type: 'constructor',
       constant: undefined,
       payable: undefined },
     { inputs: [Array],
       name: 'candidateList',
       outputs: [Array],
       stateMutability: 'view',
       type: 'function',
       constant: true,
       payable: undefined,
       signature: '0xb13c744b' },
     { inputs: [Array],
       name: 'totalVotesFor',
       outputs: [Array],
       stateMutability: 'view',
       type: 'function',
       constant: true,
       payable: undefined,
       signature: '0x2f265cf7' },
     { inputs: [Array],
       name: 'validCandidate',
       outputs: [Array],
       stateMutability: 'view',
       type: 'function',
       constant: true,
       payable: undefined,
       signature: '0x392e6678' },
     { inputs: [Array],
       name: 'voteForCandidate',
       outputs: [],
       stateMutability: 'nonpayable',
       type: 'function',
       constant: undefined,
       payable: undefined,
       signature: '0xcc9ab267' },
     { inputs: [Array],
       name: 'votesReceived',
       outputs: [Array],
       stateMutability: 'view',
       type: 'function',
       constant: true,
       payable: undefined,
       signature: '0x7021939f' } ] }
> listOfCandidates = ['Rama', 'Nick', 'Jose']
[ 'Rama', 'Nick', 'Jose' ]
> deployedContract.deploy({
...   data: bytecode,
...   arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
... }).send({
...   from:"0x64D72F3fA03B2076fb93e0FEB1B8ebF685F63780",
... gas: 1500000,
...   gasPrice: web3.utils.toWei('0.00003', 'ether')
... }).then((newContractInstance) => {
...   deployedContract.options.address = newContractInstance.options.address
...   console.log(newContractInstance.options.address)
... });
Promise {
  <pending>,
  domain:
   Domain {
     domain: null,
     _events:
      [Object: null prototype] {
        removeListener: [Function: updateExceptionCapture],
        newListener: [Function: updateExceptionCapture],
        error: [Function: debugDomainError] },
     _eventsCount: 3,
     _maxListeners: undefined,
     members: [],
     [Symbol(kWeak)]: WeakReference {} } }
> 0x8c77C08fcbb76a2583cC2669bC133752524E240E

> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)
Promise {
  <pending>,
  domain:
   Domain {
     domain: null,
     _events:
      [Object: null prototype] {
        removeListener: [Function: updateExceptionCapture],
        newListener: [Function: updateExceptionCapture],
        error: [Function: debugDomainError] },
     _eventsCount: 3,
     _maxListeners: undefined,
     members: [],
     [Symbol(kWeak)]: WeakReference {} } }
> null '0'

> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xBb2b88e4651Da3212bea83cc75325A8094988Fc7'}).then((f) => console.log(f))
Promise {
  <pending>,
  domain:
   Domain {
     domain: null,
     _events:
      [Object: null prototype] {
        removeListener: [Function: updateExceptionCapture],
        newListener: [Function: updateExceptionCapture],
        error: [Function: debugDomainError] },
     _eventsCount: 3,
     _maxListeners: undefined,
     members: [],
     [Symbol(kWeak)]: WeakReference {} } }
> { transactionHash:
   '0x2d20c35f60b4a3f86fec0a22fcb2a644dead9157ac330f14337940efd0c44383',
  transactionIndex: 0,
  blockHash:
   '0xa14c9032dc2fafbe9ab95af0e30aa5022e020061d0259e8353bf8530c9efa390',
  blockNumber: 2,
  from: '0xbb2b88e4651da3212bea83cc75325a8094988fc7',
  to: '0x8c77c08fcbb76a2583cc2669bc133752524e240e',
  gasUsed: 45168,
  cumulativeGasUsed: 45168,
  contractAddress: null,
  status: true,
  logsBloom:
   '0x
  events: {} }

> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)
Promise {
  <pending>,
  domain:
   Domain {
     domain: null,
     _events:
      [Object: null prototype] {
        removeListener: [Function: updateExceptionCapture],
        newListener: [Function: updateExceptionCapture],
        error: [Function: debugDomainError] },
     _eventsCount: 3,
     _maxListeners: undefined,
     members: [],
     [Symbol(kWeak)]: WeakReference {} } }
> null '1'

